import os
from aiogram import types, Dispatcher, types, filters
from aiogram.types import BotCommand, BotCommandScopeDefault
from keyboards import start_keyboard, menu_keyboard, back_keyboard, admin_keyboard, name_keyboard, content_keyboard, order_keyboard
from aiogram.dispatcher import FSMContext
from states import Order, Change
from funcs import get_config, Client
from asyncio import sleep


async def set_commands(bot):
    '''–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥'''
    commands = [
        BotCommand(
            command='start',
            description='–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã'
        ),
        BotCommand(
            command='help',
            description='–ü–æ–º–æ—â—å'
        ),
        BotCommand(
            command='order',
            description='–º–æ–π –∑–∞–∫–∞–∑'
        )
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def start(message: types.Message, state: FSMContext=None):
    if state:
        await state.finish()
    with open('content/menu/–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.txt', 'r', encoding='utf-8') as f:
        time = f.read()
    text = f'''
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–∏–π –†—è–¥ (–ü—É—Ç–∏–ª–∫–æ–≤–æ) ‚úåüèª

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ: 
‚úèÔ∏è –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞
‚úèÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π

{time}

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!

'''
    markup = await start_keyboard()
    photo = types.InputFile('content/photo/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.jpg')
    await message.bot.send_photo(message.from_user.id, photo, caption=text, reply_markup=markup)


async def help(message: types.Message):
    ''' –≤—ã–≤–æ–¥ –ø–æ–º–æ—â–∏'''
    markup = await back_keyboard(start=True, text='–ù–∞–∑–∞–¥')
    text = '''–í —Ä–∞–∑–¥–µ–ª–µ "–ê—Å—Å–º–æ—Ä—Ç–∏–º–µ–Ω—Ç" –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –ø–ø—Ä–æ–¥—É–∫—Ü–∏–µ–π.

–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –í—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É".

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.

–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–ª–µ–¥—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É –Ω–∏–∂–µ.

1. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –í–∞—à –∑–∞–∫–∞–∑, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ–ª–±–∞—Å–∞ —Å—Ç–æ–ª–∏—á–Ω–∞—è 200 –≥—Ä."

2. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É "–∑–∞–∫–∞–∑" –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–ø—Ü–∏–µ–π /order –≤ –º–µ–Ω—è —Å–ª–µ–≤–∞.

3. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É -1 (—Ç–∞–∫ —É–¥–∞–ª–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é) –∏–ª–∏ -2 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

4. –ù—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!)
'''
    await message.answer(text=text, reply_markup=markup)


async def back_start(message: types.Message):
    ''' —Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    await message.bot.delete_message(message.message.chat.id, message.message.message_id)
    await start(message)


async def admin(message: types.Message, state: FSMContext):
    admins = get_config().admins
    if str(message.chat.id) in admins:
        markup = await admin_keyboard()
        await message.answer('–í—ã –∞–¥–º–∏–Ω', reply_markup=markup)


async def contacts(message: types.Message):
    markup = await back_keyboard(start=True, text='–ù–∞–∑–∞–¥')
    text = """–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏:
–¢–∞—Ç—å—è–Ω–∞: (TG, WhatsApp) +7 966 072 7281 
–ê–Ω–¥—Ä–µ–π: (TG, WhatsApp) +7 963 643-39-48 """
    await message.message.answer(text=text, reply_markup=markup)


async def change_photo(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Change.Photo.state)
    markup = await content_keyboard('jpg')
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup)


async def change_photo_2(call: types.CallbackQuery, state: FSMContext):
    markup = await back_keyboard(start=True)
    await state.update_data(file=call.data)
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', reply_markup=markup)
    await state.set_state(Change.Photo_download.state)


async def change_photo_3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file = data['file']
    await message.photo[-1].download(f'content/photo/{file}.jpg')
    await message.answer('—Ñ–æ—Ç–æ –∑–∞–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await start(message, state=state)


async def change_menu(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Change.Text.state)
    markup = await content_keyboard('txt')
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup)


async def change_text_2(call: types.CallbackQuery, state: FSMContext):
    markup = await back_keyboard(start=True)
    await state.update_data(file=call.data)
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç', reply_markup=markup)
    await state.set_state(Change.Text_download.state)


async def change_text_3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file = data['file']
    with open(f"content/menu/{file}.txt", "w", encoding='utf-8') as f:
        f.write(f"{message.text}")
    await message.answer('—Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω–µ–Ω')
    await state.finish()
    await start(message)


async def menu(message: types.Message):
    ''' —Å—Ç–∞—Ä—Ç –º–µ–Ω—é '''
    await message.bot.delete_message(message.message.chat.id, message.message.message_id)
    with open('content/menu/–º–µ–Ω—é.txt', 'r', encoding='utf-8') as f:
        menu = f.read()
        lst = menu.split('\n')
        markup = await menu_keyboard(lst)
        photo = types.InputFile('content/photo/–º–µ–Ω—é.jpg')
        text = '''–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π, –∏ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –Ω–µ–µ'''
        await message.bot.send_photo(message.from_user.id, photo, caption=text, reply_markup=markup)


async def categories(call: types.CallbackQuery):
    ''' –≤—ã–±–æ—Ä –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '''
    with open('content/menu/–º–µ–Ω—é.txt', 'r', encoding='utf-8') as f:
        menu = f.read()
        lst = menu.split('\n')
    if call.data in lst:
        with open(f'content/menu/{call.data}.txt', 'r', encoding='utf-8') as f:
            text = f.read()
    else:
        text = '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è((('
    photo = types.InputFile(f'content/photo/{call.data}.jpg')
    markup = await back_keyboard()
    await call.bot.delete_message(call.message.chat.id, call.message.message_id)
    text += '\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–æ–ª–±–∞—Å–∞ —Å—Ç–æ–ª–∏—á–Ω–∞—è 200 –≥—Ä."\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É "–∑–∞–∫–∞–∑" –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–ø—Ü–∏–µ–π /order –≤ –º–µ–Ω—è —Å–ª–µ–≤–∞.'
    try:
        await call.bot.send_photo(call.from_user.id, photo, caption=text, reply_markup=markup)
    except:
        photo = types.InputFile(f'content/photo/{call.data}.jpg')
        await call.bot.send_photo(call.from_user.id, photo, caption='')
        await call.bot.send_message(call.from_user.id, text=text, reply_markup=markup)
    

async def start_delivery(call: types.CallbackQuery, state: FSMContext):
    ''' —Å—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ'''
    await state.set_state(Order.Name.state)
    id=str(call.from_user.id)
    await state.update_data(id=id)
    await state.update_data(username=call.from_user.username)
    text = '''–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n
*–£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞*'''
    markup = await back_keyboard(start=True)
    await call.bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer(text=text, reply_markup=markup)
    await state.set_state(Order.Name.state)


async def order_name(call: types.CallbackQuery, state: FSMContext):
    ''' –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã name '''
    await state.update_data(name=call.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏'''
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)
    await state.set_state(Order.Number.state)


async def order_number(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å '''
    await state.update_data(number=call.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    (–£–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞)'''
    await state.set_state(Order.Address.state)
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)


async def order_address(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç address, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã '''
    await state.update_data(address=call.text)
    markup = await order_keyboard(Client.get_order(call.from_user.id))
    if markup == False:
        markup = await back_keyboard(start=True)
    text = '''–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö.'''
    await state.set_state(Order.Products.state)
    # markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)


async def order_products(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç products, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è '''
    products = await state.get_data()
    products['products'] += f'\n{call.text}'
    await state.update_data(products=products['products'])
    with open('content/menu/–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.txt', 'r', encoding='utf-8') as f:
        time = f.read()
    text = f'''–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n{time}'''
    await state.set_state(Order.Time.state)
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)


async def order_time(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç time, –ø–æ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ '''
    await state.update_data(time=call.text)
    text = f'''–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–ø—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑. –° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'''
    await call.answer(text)
    order = await state.get_data()
    await state.update_data(time=call.text)
    order_text = f'''–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑!
@{order['username']} {order['name']}
—Ç–µ–ª: {order['number']}
–∞–¥—Ä–µ—Å: {order['address']}
–∑–∞–∫–∞–∑: {order['products']}
–¥–∞—Ç–∞, –≤—Ä–µ–º—è: {order['time']}'''
    admins = get_config().admins
    for i in admins:
        await call.bot.send_message(int(i), order_text)
    await sleep(4)
    await state.finish()
    await start(call)
    Client.del_product('data', call.from_user.id, in_order='clear')


async def order_add(message: types.Message, state: FSMContext):
    Client.record_product(message.text, str(message.from_user.id))
    text = f"–ø—Ä–æ–¥—É–∫—Ç {message.text} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É, –ø–æ–∑–∂–µ, –í—ã —Å–º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ"
    await message.answer(text=text)


async def order_get(message: types.Message, state: FSMContext):
    text = f"{Client.get_order(message.from_user.id)}"
    if text == "":
        text = "–ó–∞–∫–∞–∑ –ø—É—Å—Ç"
    text += '\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É -1 (—Ç–∞–∫ —É–¥–∞–ª–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é) –∏–ª–∏ -2 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.'
    text = '–í–∞—à –∑–∞–∫–∞–∑:\n' + text
    markup = await back_keyboard(start=True, text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    await message.answer(text=text, reply_markup=markup)


async def order_del(message: types.Message, state: FSMContext):
    text = Client.del_product(message.text, message.from_user.id)
    await message.answer(text=text)
    await order_get(message, state)


async def product_del(call: types.CallbackQuery, state: FSMContext):
    text = Client.del_product(' '.join(call.data.split(" ")[1:]), call.from_user.id, in_order=True)
    markup = await order_keyboard(Client.get_order(call.from_user.id))
    if not markup:
        markup = None 
        await call.message.edit_text(text='–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç. –í–ø–∏—à–∏—Ç–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä (–∫–æ–ª–±–∞—Å–∞ —Å—Ç–æ–ª–∏—á–Ω–∞—è 100 –≥—Ä–∞–º–º, –∫–æ–ª–±–∞—Å–∞ –∫—Ä–º–ª–µ–≤—Å–∫–∞—è 500 –≥—Ä–∞–º–º)', reply_markup=markup)
        await state.set_state(Order.Products.state)
        return
    await call.message.edit_text(text=text, reply_markup=markup)
    await state.set_state(Order.Products.state)


async def add_to_order(call: types.CallbackQuery, state: FSMContext):
    ''' –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è '''
    order = Client.get_order(call.from_user.id)
    await state.update_data(products=order)
    text = '''–î–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∫ –∑–∞–∫–∞–∑—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.
–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É. 
–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö.'''
    await state.set_state(Order.Products.state)
    markup = await back_keyboard(start=True)
    await call.message.edit_text(text=text, reply_markup=markup)


#–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
def registration_handlers(dp: Dispatcher):
    #Commands
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(admin, commands=['admin'])
    dp.register_message_handler(order_get, commands=['order'])
    dp.register_message_handler(help, commands=['help'])
    #Callbacks
    dp.register_callback_query_handler(menu, text='menu')
    dp.register_callback_query_handler(start, text='start')
    dp.register_callback_query_handler(start, state='*', text='start')
    dp.register_callback_query_handler(back_start, text='back_start')
    dp.register_callback_query_handler(start_delivery, text='delivery')
    dp.register_callback_query_handler(change_photo, text='change_photo')
    dp.register_callback_query_handler(change_menu, text='change_menu')
    dp.register_callback_query_handler(contacts, text='contacts')
    dp.register_callback_query_handler(add_to_order, text="add_to_order", state='*')
    dp.register_callback_query_handler(product_del, filters.Text(startswith=["remove"]), state='*')
    dp.register_callback_query_handler(categories)
    #States
        #Name
    dp.register_callback_query_handler(order_name, state=Order.Name)
    dp.register_message_handler(order_name, state=Order.Name)
    dp.register_message_handler(order_number, state=Order.Number)
    dp.register_message_handler(order_address, state=Order.Address)
    dp.register_message_handler(order_products, state=Order.Products)
    dp.register_message_handler(order_time, state=Order.Time)
        #Admin
    dp.register_callback_query_handler(change_photo_2, state=Change.Photo)
    dp.register_message_handler(change_photo_3, content_types='photo' ,state=Change.Photo_download)
    dp.register_callback_query_handler(change_text_2, state=Change.Text)
    dp.register_message_handler(change_text_3, state=Change.Text_download)
        #Echoes
    dp.register_message_handler(order_del, text_startswith='-')
    dp.register_message_handler(order_get, text="–∑–∞–∫–∞–∑")
    dp.register_message_handler(order_get, text="–ó–∞–∫–∞–∑")
    dp.register_message_handler(order_add)
        
