import os
from aiogram import types, Dispatcher, types
from keyboards import start_keyboard, menu_keyboard, back_keyboard, admin_keyboard, name_keyboard, content_keyboard
from aiogram.dispatcher import FSMContext
from states import Order, Change
from funcs import get_config, Client
from asyncio import sleep
# 6500743193:AAEv7C1MescqsmCa979OptxW3qOMPRs9i2s

async def start(message: types.Message):
    with open('content/menu/–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.txt', 'r', encoding='utf-8') as f:
        time = f.read()
    text = f'''
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ú—è—Å–Ω–∏—Ü–∫–∏–π –†—è–¥ (–ü—É—Ç–∏–ª–∫–æ–≤–æ) ‚úåüèª

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ: 
‚úèÔ∏è –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–∞
‚úèÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π

{time}

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!

'''
    markup = await start_keyboard()
    photo = types.InputFile('content/photo/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.jpg')
    await message.bot.send_photo(message.from_user.id, photo, caption=text, reply_markup=markup)
    

async def back_start(message: types.Message):
    ''' —Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    await message.bot.delete_message(message.message.chat.id, message.message.message_id)
    await start(message)


async def admin(message: types.Message, state: FSMContext):
    admins = get_config().admins
    if str(message.chat.id) in admins:
        markup = await admin_keyboard()
        await message.answer('–í—ã –∞–¥–º–∏–Ω', reply_markup=markup)


async def change_photo(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Change.Photo.state)
    markup = await content_keyboard('jpg')
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup)


async def change_photo_2(call: types.CallbackQuery, state: FSMContext):
    markup = await back_keyboard(start=True)
    await state.update_data(file=call.data)
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', reply_markup=markup)
    await state.set_state(Change.Photo_download.state)


async def change_photo_3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file = data['file']
    await message.photo[-1].download(f'content/photo/{file}.jpg')
    await message.answer('—Ñ–æ—Ç–æ –∑–∞–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await start(message)


async def change_menu(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Change.Text.state)
    markup = await content_keyboard('txt')
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup)


async def change_text_2(call: types.CallbackQuery, state: FSMContext):
    markup = await back_keyboard(start=True)
    await state.update_data(file=call.data)
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç', reply_markup=markup)
    await state.set_state(Change.Text_download.state)


async def change_text_3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file = data['file']
    with open(f"content/menu/{file}.txt", "w", encoding='utf-8') as f:
        f.write(f"{message.text}")
    await message.answer('—Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω–µ–Ω')
    await state.finish()
    await start(message)


async def menu(message: types.Message):
    ''' —Å—Ç–∞—Ä—Ç –º–µ–Ω—é '''
    await message.bot.delete_message(message.message.chat.id, message.message.message_id)
    with open('content/menu/–º–µ–Ω—é.txt', 'r', encoding='utf-8') as f:
        menu = f.read()
        lst = menu.split('\n')
        markup = await menu_keyboard(lst)
        photo = types.InputFile('content/photo/–º–µ–Ω—é.jpg')
        text = '''–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π, –∏ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –Ω–µ–µ'''
        await message.bot.send_photo(message.from_user.id, photo, caption=text, reply_markup=markup)


async def categories(call: types.CallbackQuery):
    ''' –≤—ã–±–æ—Ä –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '''
    with open('content/menu/–º–µ–Ω—é.txt', 'r', encoding='utf-8') as f:
        menu = f.read()
        lst = menu.split('\n')
    if call.data in lst:
        with open(f'content/menu/{call.data}.txt', 'r', encoding='utf-8') as f:
            text = f.read()
    else:
        text = '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è((('
    photo = types.InputFile(f'content/photo/{call.data}.jpg')
    markup = await back_keyboard()
    await call.bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.bot.send_photo(call.from_user.id, photo, caption=text, reply_markup=markup)


async def start_delivery(call: types.CallbackQuery, state: FSMContext):
    ''' —Å—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ'''
    await state.set_state(Order.Name.state)
    id=str(call.from_user.id)
    await state.update_data(id=id)
    await state.update_data(username=call.from_user.username)
    text = '''–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n
*–£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞*'''
    markup = await back_keyboard(start=True)
    await call.bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer(text=text, reply_markup=markup)
    await state.set_state(Order.Name.state)
#     if Client(id).check():
#         name = Client(id).get_stuff('name')
#         text = f'''–ó–∞–∫–∞–∑ –Ω–∞ –∏–º—è - {name}?'''
#         markup = await name_keyboard('name')
#         await call.message.answer(text=text, reply_markup=markup)
#         await call.bot.delete_message(call.message.chat.id, call.message.message_id)
#         return
#     else:
#         Client(id).record({})
#         text = '''–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n
#         *–£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞*'''
#         markup = await back_keyboard(start=True)
#         await call.bot.delete_message(call.message.chat.id, call.message.message_id)
#         await call.message.answer(text=text, reply_markup=markup)


async def order_name(call: types.CallbackQuery, state: FSMContext):
    ''' –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã name '''
    await state.update_data(name=call.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏'''
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)
    await state.set_state(Order.Number.state)


# async def order_name(call: types.CallbackQuery, state: FSMContext):
#     ''' –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã name '''
#     if isinstance(call, types.Message):
#         await state.update_data(name=call.text)
#         text = '''*–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏*''' 
#         Client(call.from_user.id).record_stuff("name", f'{call.text}')
#         markup = await back_keyboard(start=True)
#         await call.bot.delete_message(call.chat.id, call.message_id)
#         await call.answer(text=text, reply_markup=markup)
#         await state.set_state(Order.Number.state)
#         await call.bot.delete_message(call.chat.id, call.message_id-1)
#         return
#     if call.data == 'name_–¥–∞':
#         name = Client(call.from_user.id).get_stuff('name')
#         await state.update_data(name=name)
#         text = '''*–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏*''' 
#     elif call.data == 'name_–Ω–µ—Ç':
#         text = '*–£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞*' 
#         markup = await back_keyboard(start=True)
#         await call.bot.delete_message(call.message.chat.id, call.message.message_id)
#         await call.message.answer(text=text, reply_markup=markup)
#         return
#     elif call.data == 'start':
#         await state.finish()
#         await start(call)
#         return
#     else:
#         text = '–ß–¢–û –¢–û –ü–û–®–õ–û –ù–ï –¢–ê–ö'
#         await call.message.answer(text=text)
#         await start(call)
#         await state.finish()
#     markup = await back_keyboard(start=True)
#     await call.bot.delete_message(call.message.chat.id, call.message.message_id)
#     await call.message.answer(text=text, reply_markup=markup)


async def order_number(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å '''
    await state.update_data(number=call.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    (–£–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞)'''
    await state.set_state(Order.Address.state)
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)


async def order_address(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç address, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã '''
    await state.update_data(address=call.text)
    text = '''–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö.'''
    await state.set_state(Order.Products.state)
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)


async def order_products(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç products, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è '''
    await state.update_data(products=call.text)
    with open('content/menu/–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.txt', 'r', encoding='utf-8') as f:
        time = f.read()
    text = f'''–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n{time}'''
    await state.set_state(Order.Time.state)
    markup = await back_keyboard(start=True)
    await call.answer(text, reply_markup=markup)


async def order_time(call: types.CallbackQuery, state: FSMContext):
    ''' –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç time, –ø–æ—Å—ã–ª–∞–µ—Ç –∑–∞–∫–∞–∑ '''
    await state.update_data(time=call.text)
    text = f'''–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–ø—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑. –° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'''
    await call.answer(text)
    order = await state.get_data()
    order_text = f'''–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑!
@{order['username']} {order['name']}
{order['number']}
{order['address']}
{order['products']}
{order['time']}'''
    admins = get_config().admins
    for i in admins:
        await call.bot.send_message(int(i), order_text)
    await sleep(4)
    await state.finish()
    await start(call)


#–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
def registration_handlers(dp: Dispatcher):
    #Commands
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(admin, commands=['admin'])

    #Callbacks
    dp.register_callback_query_handler(menu, text='menu')
    dp.register_callback_query_handler(start, text='start')
    dp.register_callback_query_handler(start, state='*', text='start')
    dp.register_callback_query_handler(back_start, text='back_start')
    dp.register_callback_query_handler(start_delivery, text='delivery')
    dp.register_callback_query_handler(change_photo, text='change_photo')
    dp.register_callback_query_handler(change_menu, text='change_menu')
    dp.register_callback_query_handler(categories)
#     #States
        #Name
    dp.register_callback_query_handler(order_name, state=Order.Name)
    dp.register_message_handler(order_name, state=Order.Name)
    dp.register_message_handler(order_number, state=Order.Number)
    dp.register_message_handler(order_address, state=Order.Address)
    dp.register_message_handler(order_products, state=Order.Products)
    dp.register_message_handler(order_time, state=Order.Time)
        #Admin
    dp.register_callback_query_handler(change_photo_2, state=Change.Photo)
    dp.register_message_handler(change_photo_3, content_types='photo' ,state=Change.Photo_download)
    dp.register_callback_query_handler(change_text_2, state=Change.Text)
    dp.register_message_handler(change_text_3, state=Change.Text_download)

#     dp.register_message_handler(work_name, state=Work.Name)
#     dp.register_message_handler(work_age, state=Work.Age)
#     dp.register_message_handler(work_post, state=Work.Post)
#     dp.register_message_handler(work_why, state=Work.Why)
#     dp.register_message_handler(work_know_from, state=Work.Know_from)
#     dp.register_message_handler(work_resume, state=Work.Link_resume)
#     dp.register_message_handler(work_case, state=Work.Link_case)
#     dp.register_message_handler(work_load, state=Work.Load)
#         #–ë–∞—Ä—Ç–µ—Ä
#     dp.register_message_handler(barter_name, state=Barter.Name)
#     dp.register_message_handler(barter_number, state=Barter.Number)
#     dp.register_message_handler(barter_link, state=Barter.Link)
#     dp.register_message_handler(barter_subs, state=Barter.Subs)
#     dp.register_message_handler(barter_city, state=Barter.City)
#         #–ú–µ–Ω–µ–¥–∂–µ—Ä
#     dp.register_message_handler(manager_number, state=Manager.Number)
#     dp.register_message_handler(manager_name, state=Manager.Name)
#     dp.register_message_handler(manager_link, state=Manager.Link)
#     dp.register_message_handler(manager_q, state=Manager.Q)
#         #–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
#     dp.register_message_handler(colab_name, state=Colab.Name)
#     dp.register_message_handler(colab_post, state=Colab.Post)
#     dp.register_message_handler(colab_company, state=Colab.Company)
#     dp.register_message_handler(colab_reason, state=Colab.Reason)
#     dp.register_message_handler(colab_number, state=Colab.Number)
#         #Instagram
#     dp.register_message_handler(inst_number, state=Instagram.Number)
#     dp.register_message_handler(inst_number_wait, state=Instagram.Wait)
#     dp.register_message_handler(inst_link, state=Instagram.Link)
#     dp.register_callback_query_handler(inst_topic_choose, state=Instagram.Topic, text_startswith='Topic')
#     dp.register_callback_query_handler(inst_topic_choose_2, state=Instagram.Topic, text_startswith='topic')
#     dp.register_message_handler(inst_topic_another, state=Instagram.Topic_another)
#     dp.register_message_handler(inst_subs, state=Instagram.Subs)
#     dp.register_message_handler(inst_descroption, state=Instagram.Description)
#     dp.register_message_handler(inst_city, state=Instagram.City)
#     dp.register_message_handler(inst_stories, state=Instagram.Stories)
#     dp.register_message_handler(inst_stories_scope, state=Instagram.Stories_scope)
#     dp.register_message_handler(inst_reels, state=Instagram.Reels)
#     dp.register_message_handler(inst_reels_scope, state=Instagram.Reels_scope)
#     dp.register_message_handler(inst_statistic, state=Instagram.Statistic)
#         #YouTube
#     dp.register_message_handler(yt_number, state=YT.Number)
#     dp.register_message_handler(yt_number_wait, state=YT.Wait)
#     dp.register_message_handler(yt_link, state=YT.Link)
#     dp.register_callback_query_handler(yt_topic_choose, state=YT.Topic, text_startswith='Topic')
#     dp.register_callback_query_handler(yt_topic_choose_2, state=YT.Topic, text_startswith='topic')
#     dp.register_message_handler(yt_topic_another, state=YT.Topic_another)
#     dp.register_message_handler(yt_subs, state=YT.Subs)
#     dp.register_message_handler(yt_descroption, state=YT.Description)
#     dp.register_message_handler(yt_country, state=YT.Country)
#     dp.register_message_handler(yt_shorts, state=YT.Shorts)
#     dp.register_message_handler(yt_shorts_views, state=YT.Shorts_views)
#     dp.register_message_handler(yt_video, state=YT.Video)
#     dp.register_message_handler(yt_video_views, state=YT.Video_views)
#     dp.register_message_handler(yt_statistic, state=YT.Statistic)
#         #VK
#     dp.register_message_handler(vk_number, state=VK.Number)
#     dp.register_message_handler(vk_number_wait, state=VK.Wait)
#     dp.register_message_handler(vk_link, state=VK.Link)
#     dp.register_callback_query_handler(vk_topic_choose, state=VK.Topic, text_startswith='Topic')
#     dp.register_callback_query_handler(vk_topic_choose_2, state=VK.Topic, text_startswith='topic')
#     dp.register_message_handler(vk_topic_another, state=VK.Topic_another)
#     dp.register_message_handler(vk_subs, state=VK.Subs)
#     dp.register_message_handler(vk_descroption, state=VK.Description)
#     dp.register_message_handler(vk_country, state=VK.Country)
#     dp.register_message_handler(vk_post, state=VK.Post)
#     dp.register_message_handler(vk_post_views, state=VK.Post_views)
#     dp.register_message_handler(vk_clip, state=VK.Clip)
#     dp.register_message_handler(vk_clip_views, state=VK.Clip_views)
#     dp.register_message_handler(vk_statistic, state=VK.Statistic)
#         #TG
#     dp.register_message_handler(tg_number, state=TG.Number)
#     dp.register_message_handler(tg_number_wait, state=TG.Wait)
#     dp.register_message_handler(tg_link, state=TG.Link)
#     dp.register_callback_query_handler(tg_topic_choose, state=TG.Topic, text_startswith='Topic')
#     dp.register_callback_query_handler(tg_topic_choose_2, state=TG.Topic, text_startswith='topic')
#     dp.register_message_handler(tg_topic_another, state=TG.Topic_another)
#     dp.register_message_handler(tg_subs, state=TG.Subs)
#     dp.register_message_handler(tg_post_view, state=TG.Post_views)
#     dp.register_message_handler(tg_post, state=TG.Post)
#     dp.register_message_handler(tg_country, state=TG.Country)
#     dp.register_message_handler(tg_description, state=TG.Description)
#     dp.register_message_handler(tg_statistic, state=TG.Statistic)
#         #Dzen
#     dp.register_message_handler(dz_number, state=DZ.Number)
#     dp.register_message_handler(dz_number_wait, state=DZ.Wait)
#     dp.register_message_handler(dz_link, state=DZ.Link)
#     dp.register_callback_query_handler(dz_topic_choose, state=DZ.Topic, text_startswith='Topic')
#     dp.register_callback_query_handler(dz_topic_choose_2, state=DZ.Topic, text_startswith='topic')
#     dp.register_message_handler(dz_topic_another, state=DZ.Topic_another)
#     dp.register_message_handler(dz_subs, state=DZ.Subs)
#     dp.register_message_handler(dz_post_view, state=DZ.Post_views)
#     dp.register_message_handler(dz_post, state=DZ.Post)
#     dp.register_message_handler(dz_description, state=DZ.Description)
#     dp.register_message_handler(dz_statistic, state=DZ.Statistic)
        #–ö–æ–Ω—Ç–∞–∫—Ç—ã
    # dp.register_callback_query_handler(contacts, text_startswith='contacts')

